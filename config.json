{
  "log": {
    "loglevel": "info"
  },
  "api": {
    "services": [
      "HandlerService",
      "LoggerService",
      "StatsService"
    ],
    "tag": "api"
  },
  "stats": {},
  "policy": {
    "levels": {
      "0": {
        "statsUserUplink": true,
        "statsUserDownlink": true
      }
    },
    "system": {
      "statsInboundUplink": true,
      "statsInboundDownlink": true,
      "statsOutboundUplink": true,
      "statsOutboundDownlink": true
    }
  },
  "inbounds": [
    {
      "tag": "Vless-TCP-XTLS",
      "port": 8080,                   // This is TLS entrypoint. This entrypoint does the SSL Termination then routes the request based on the Path or ALPN type.
      "protocol": "vless",
      "settings": {
        "clients": [
          { 
            "id": "128a1c04-e0d0-4ba2-bc35-4e3f1dd5a2f0", //Change to your own
            "flow": "xtls-rprx-vision",
            "level": 0
            // "flow": "xtls-rprx-direct"
          }
        ],
        "decryption": "none",
        "fallbacks": [
          // Websocket
          {
            // if the path was `/vlws`, pass it to vless-ws listener
            "path": "/vlws",
            "dest": "@vless-ws",
            "xver": 2 //Enable the sending of the PROXY protocol, and send the real source IP and port to the following vmess+ws application. 1 or 2 indicates the PROXY protocol version. Consistent with the following, it is recommended to configure 2.
          },
          {
            // if the path was `/vmws`, pass it to vmess-ws listener
            "path": "/vmws",
            "dest": "@vmess-ws",
            "xver": 2
          },
          {
            // if the path was `/trojanws`, pass it to trojan-ws listener
            "path": "/trojanws",
            "dest": "@trojan-ws",
            "xver": 2
          },
          {
            // if the path was `/ssws`, pass it to port 4001 (shadowsocks-ws listener)
            "path": "/ssws",
            "dest": 4001
          }
        ]
      },
      "streamSettings": {
        "network": "tcp",
        // If XTLS Vision is enabled, "security" must be "tls"
        // If XTLS Direct is enabled, "security" must be "xtls"
        "security": "tls",
        // If XTLS Direct is enabled, "tlsSettings" should also be changed to "xtlsSettings"
        "tlsSettings": {
          "certificates": [
            {
              "ocspStapling": 3600, //The Xray version is not less than v1.3.0 to support configuring the time interval between OCSP stapling update and certificate hot reload. Currently V2Ray does not support it. If you use V2Ray as the server, you must delete this configuration.
              "certificateFile": "/etc/ssl/example.com/domain.pem", // this is te fullchain (domain + any bundle). Make sure the permissions are correct (absolute path)
              "keyFile": "/etc/ssl/example.com/domain-key.pem" // this is the private key of the cert. Make sure the permissions are correct (absolute path)
            },
            {
              // more domains and therefore more certificates can be added to this `certificates` list
              "ocspStapling": 3600,
              "certificateFile": "/etc/ssl/behindcdn.com/domain.pem",
              "keyFile": "/etc/ssl/behindcdn.com/domain-key.pem"
            }
          ],
          "minVersion": "1.2", //Xray version is not less than v1.1.4 to support configuring the minimum TLS version. Currently V2Ray does not support it. If you use V2Ray as the server, you must delete this configuration.
          "cipherSuites": "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", //Xray版本不小于v1.1.4才支持配置密码套件（若无RSA证书，可删除所有RSA算法的密码套件；无ECC证书, to remove cipher suites for all ECDSA algorithms.). Currently V2Ray does not support it. If you use V2Ray as the server, you must delete this configuration.
          "alpn": [
            "h2", //Enabling h2 connection needs to configure h2 fallback, otherwise inconsistency (streaking) is easily detected by the wall and blocked.
            "http/1.1" //Enabling http/1.1 connection needs to configure http/1.1 fallback, otherwise inconsistency (streaking) is easily detected by the wall and blocked.
          ]
        }
      },
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      }
    },
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                  WebSocket (VLESS - VMESS - TROJAN - ShadowSocks)                                  //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    {
      "listen": "@vless-ws",
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "id": "128a1c04-e0d0-4ba2-bc35-4e3f1dd5a2f0", //Change to your own UUID
            "level": 0

          }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "ws",
        "security": "none",
        "wsSettings": {
          "acceptProxyProtocol": true,
          "path": "/vlws"
        }
      },
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      }
    },
    {
      "listen": "@vmess-ws",
      "protocol": "vmess",
      "settings": {
        "clients": [
          {
            "id": "128a1c04-e0d0-4ba2-bc35-4e3f1dd5a2f0",
            "level": 0
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "security": "none",
        "wsSettings": {
          "acceptProxyProtocol": true,
          "path": "/vmws"
        }
      },
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      }
    },
    {
      "listen": "@trojan-ws", //trojan+ws listener process
      "protocol": "trojan",
      "settings": {
        "clients": [
          {
            "password": "desdemona99",
            "level": 0
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "security": "none",
        "wsSettings": {
          "acceptProxyProtocol": true, //Enable PROXY protocol reception, receive the real source IP and port
          "path": "/trojanws" //Change to your own path
        }
      },
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      }
    },
    {
      "tag": "shadowsocks-ws",
      "listen": "127.0.0.1",
      "port": 4001,
      "protocol": "shadowsocks",
      "settings": {
        "method": "chacha20-ietf-poly1305",
        "password": "desdemona99",
        "level": 0
      },
      "streamSettings": {
        "network": "ws",
        "security": "none",
        "wsSettings": {
          "path": "/ssws"
        }
      },
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      }
    }
    ],
    "dns":{
        "servers":[
            "https+local://8.8.8.8/dns-query"
        ]
    },
    "outbounds":[
        {
            "protocol":"freedom"
        },
        {
            "tag":"WARP",
            "protocol":"wireguard",
            "settings":{
                "secretKey":"YFYOAdbw1bKTHlNNi+aEjBM3BO7unuFC5rOkMRAz9XY=",
                "address":[
                    "172.16.0.2/32",
                    "2606:4700:110:8a36:df92:102a:9602:fa18/128"
                ],
                "peers":[
                    {
                        "publicKey":"bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=",
                        "allowedIPs":[
                            "0.0.0.0/0",
                            "::/0"
                        ],
                        "endpoint":"162.159.193.10:2408"
                    }
                ],
                "reserved":[78, 135, 76],
                "mtu":1280
            }
        }
    ],
    "routing":{
        "domainStrategy":"AsIs",
        "rules":[
            {
                "type":"field",
                "domain":[
                    "domain:openai.com",
                    "domain:ai.com"
                ],
                "outboundTag":"WARP"
            }
        ]
    }
}
